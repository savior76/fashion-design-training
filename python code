import os
import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.models import Model, load_model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping



DATA_DIR = r"C:/Users/Lenovo/data/fashion-dataset/fashion-dataset"
if not os.path.isdir(DATA_DIR):
    raise FileNotFoundError(f"Dataset directory not found at {DATA_DIR}")


styles_csv = os.path.join(DATA_DIR, 'styles.csv')
if not os.path.isfile(styles_csv):
    raise FileNotFoundError(f"Could not find styles.csv at {styles_csv}")
styles_df = pd.read_csv(
    styles_csv,
    engine='python',
    on_bad_lines='skip'
)


styles_df['id'] = styles_df['id'].astype(str).apply(
    lambda x: x if x.lower().endswith('.jpg') else f"{x}.jpg"
)



y_cols = ['baseColour', 'articleType', 'season', 'gender']
for col in y_cols:
    styles_df[col] = styles_df[col].fillna('Unknown')
    styles_df[col + '_code'] = styles_df[col].astype('category').cat.codes


class_indices = {
    col: {int(code): label for code, label in enumerate(styles_df[col].astype('category').cat.categories)}
    for col in y_cols
}
with open('class_indices.json', 'w') as f:
    json.dump(class_indices, f)



print("Available columns:", styles_df.columns.tolist())
print(styles_df[[*y_cols]].head())
print(styles_df.info())

fig, axes = plt.subplots(2, 2, figsize=(12, 10))
for ax, col in zip(axes.flatten(), y_cols):
    styles_df[col].value_counts().plot(kind='bar', ax=ax, title=col)
plt.tight_layout(); plt.show()



IMG_SIZE = (224, 224)
BATCH_SIZE = 32

datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,
    horizontal_flip=True,
    rotation_range=15,
    zoom_range=0.1
)

y_cols_code = [col + '_code' for col in y_cols]

gen_train = datagen.flow_from_dataframe(
    dataframe=styles_df,
    directory=os.path.join(DATA_DIR, 'images'),
    x_col='id',
    y_col=y_cols_code,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='multi_output',
    subset='training'
)

gen_val = datagen.flow_from_dataframe(
    dataframe=styles_df,
    directory=os.path.join(DATA_DIR, 'images'),
    x_col='id',
    y_col=y_cols_code,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='multi_output',
    subset='validation'
)



base_model = ResNet50(weights='imagenet', include_top=False, input_shape=IMG_SIZE + (3,))
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dropout(0.5)(x)

outputs = []
for col in y_cols:
    outputs.append(
        Dense(
            units=len(class_indices[col]),
            activation='softmax',
            name=col
        )(x)
    )

model = Model(inputs=base_model.input, outputs=outputs)
for layer in base_model.layers:
    layer.trainable = False

model.compile(
    optimizer=Adam(1e-3),
    loss={col: 'sparse_categorical_crossentropy' for col in y_cols},
    metrics=['accuracy']
)
model.summary()



callbacks = [
    ModelCheckpoint('fashion_model.h5', save_best_only=True, monitor='val_loss'),
    EarlyStopping(patience=5, restore_best_weights=True, monitor='val_loss')
]
history = model.fit(
    gen_train,
    validation_data=gen_val,
    epochs=1,
    callbacks=callbacks
)



def predict_image(
    image_path="C:/Users/Lenovo/Desktop/61JxTwwj-5L._SY879_.jpg",
    model_path='fashion_model.h5',
    class_indices_path='class_indices.json'
):
    
    
    with open(class_indices_path, 'r') as f:
        ci = json.load(f)

    
    model = load_model(model_path)

   
    img = load_img(image_path, target_size=IMG_SIZE)
    arr = img_to_array(img) / 255.0
    arr = np.expand_dims(arr, axis=0)

    
    preds = model.predict(arr)
    results = {}
    for i, col in enumerate(y_cols):
        idx = np.argmax(preds[i], axis=-1)[0]
        results[col] = ci[col][str(idx)]

    return results


if __name__ == "__main__":
    print("Predictions for sample image:", predict_image())
